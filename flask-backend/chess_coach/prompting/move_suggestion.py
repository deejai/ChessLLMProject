from chess_coach.stockfish.handlers import StockfishPool, StockfishInstance
from chess_coach.stockfish.utilities import fen_to_description
from textwrap import dedent, indent

def next_move_advice(sf_pool: StockfishPool, player_elo: int, fen: str):
    sf_instance: StockfishInstance = sf_pool.get_instance()

    ascii_board = sf_instance.get_board_ascii(fen)

    top_moves_str = sf_instance.get_top_moves(fen)

    system_message = dedent(f"""
    ###System: You are a chess coach aided by advanced analysis tools.
    Please analyze the current board state to offer tailored advice for a player with an ELO ranking of {player_elo}.
    Consider highlighting key strategic ideas, immediate threats, and potential moves. Your goal is to be as insightful and helpful as possible.

    ----
    Player ELO: {player_elo}

    ----
    Here is the ASCII Board representation:
        r, n, b, q, k, p are black's pieces (rook, knight, bishop, queen, king, pawn).
        R, N, B, Q, K, P are white's pieces (Rook, Knight, Bishop, Queen, King, Pawn).
        . represents an empty square.

{indent(ascii_board, '        ')}

    ----
    Here is the board's FEN: {fen}

    ----
    Here is another descriptive representation of the board:
{indent(fen_to_description(fen), '        ')}

    ----
    These are the top moves generated by the chess engine Stockfish. Consider the player's ELO when suggesting moves. Some moves may be too intricate for beginners. Consider why these moves are good or less than ideal.
    Top Moves:
{indent(top_moves_str, '        ')}

    ----

    Think your response through step by step. Re-think it at least once. Once you're confident in your advice, generate a summary to provide to the player.

    IMPORTANT: Prefix the summary with `__SUMMARY__`. Do not exceed 4000 words total for your thinking plus summary. Keep the summary under ~400 words and make it pleasant to read and speak. Don't mention the player's ELO necessarily, just use it to inform your level of advice.
    """)

    sf_pool.release_instance(sf_instance)

    return system_message
